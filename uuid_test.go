package uuid

import (
	"testing"
)

// TestHelloName calls greetings.Hello with a name, checking
// for a valid return value.

func TestUUIDv7FromBytes(t *testing.T) {
	_, err := UUIDv7FromBytes([]byte{0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16})
	if err != nil {
		t.Fatal("Did not expet an error during a conversion", err)
	}

	_, err = UUIDv7FromBytes([]byte{0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16})
	if err == nil {
		t.Fatal("Expeted a conversion to error", err)
	}

	temp, _ := UUIDv7FromBytes([]byte{0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16})

	var byteArray [16]byte = [16]byte(temp)
	if byteArray != [16]byte{0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16} {
		t.Fatal("Somehow byte array is changed after a marshaling")
	}
}

func TestUUIDv7Ver(t *testing.T) {
	test, _ := UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Ver() != 15 {
		t.Fatal("Expected Ver to be 16, got ", test.Ver(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Ver() != 0 {
		t.Fatal("Expected Ver to be 0, got ", test.Ver(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Ver() != 7 {
		t.Fatal("Expected Ver to be 7, got ", test.Ver(), " instead")
	}
}

func TestUUIDv7Var(t *testing.T) {
	test, _ := UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Var() != 3 {
		t.Fatal("Expected Var to be 3, got ", test.Var(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Var() != 0 {
		t.Fatal("Expected Var to be 0, got ", test.Var(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Var() != 2 {
		t.Fatal("Expected Var to be 2, got ", test.Var(), " instead")
	}
}

func TestUUIDv7UnixTS(t *testing.T) {
	test, _ := UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.UnixTS() != 68719476735 {
		t.Fatal("Expected UnixTS to be 68719476735, got ", test.UnixTS(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.UnixTS() != 0 {
		t.Fatal("Expected UnixTS to be 0, got ", test.UnixTS(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x01, 0xE5, 0x30, 0xE0, 0xF0, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.UnixTS() != 508759567 {
		t.Fatal("Expected UnixTS to be 508759567, got ", test.UnixTS(), " instead")
	}
}

func TestUUIDv7Random(t *testing.T) {
	test, _ := UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Random() != 4611686018427387903 {
		t.Fatal("Expected Random to be 4611686018427387903, got ", test.Random(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	if test.Random() != 0 {
		t.Fatal("Expected Random to be 0, got ", test.Random(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x01, 0xE5, 0x30, 0xE0, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0xCB, 0xFF, 0xFF})

	if test.Random() != 4611686018373648383 {
		t.Fatal("Expected Random to be 4611686018373648383, got ", test.Random(), " instead")
	}
}

func TestUUIDv7Msec(t *testing.T) {
	test, _ := UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Msec() != 4095 {
		t.Fatal("Expected Msec to be 4095, got ", test.Msec(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	if test.Msec() != 0 {
		t.Fatal("Expected Msec to be 0, got ", test.Msec(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x01, 0xE5, 0x30, 0xE0, 0xF4, 0xD2, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0xCB, 0xFF, 0xFF})

	if test.Msec() != 1234 {
		t.Fatal("Expected Msec to be 1234, got ", test.Msec(), " instead")
	}
}

func TestUUIDv7Subsec(t *testing.T) {
	test, _ := UUIDv7FromBytes([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	if test.Subsec() != 4095 {
		t.Fatal("Expected Subsec to be 4095, got ", test.Subsec(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	if test.Subsec() != 0 {
		t.Fatal("Expected Subsec to be 0, got ", test.Subsec(), " instead")
	}

	test, _ = UUIDv7FromBytes([]byte{0x01, 0xE5, 0x30, 0xE0, 0xF4, 0xD2, 0xF4, 0xD2, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0xCB, 0xFF, 0xFF})

	if test.Subsec() != 1234 {
		t.Fatal("Expected Subsec to be 1234, got ", test.Subsec(), " instead")
	}
}
